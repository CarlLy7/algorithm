package dp;

/**
 * @description: plus题目 https://leetcode.cn/problems/4-keys-keyboard/
 * 假设你有一个特殊的键盘，上面只有四个键，它们分别是：
 *
 * 1、A 键：在屏幕上打印一个 A。
 *
 * 2、Ctrl-A 键：选中整个屏幕。
 *
 * 3、Ctrl-C 键：复制选中的区域到缓冲区。
 *
 * 4、Ctrl-V 键：将缓冲区的内容输入到光标所在的屏幕上。
 *
 * 这就和我们平时使用的全选复制粘贴功能完全相同嘛，只不过题目把 Ctrl 的组合键视为了一个键。现在要求你只能进行 N 次操作，请你计算屏幕上最多能显示多少个 A？
 * @author: lyq
 * @createDate: 23/4/2023
 * @version: 1.0
 */
public class keysKeyBoard {
    public int maxA(int N){
        //dp数组的定义，当你进行到第i次操作的时候你屏幕中最多有dp[i]个A，这里什么是N+1呢，因为整体右移一位，i=0无意义
        int[] dp=new int[N+1];
        //i=0的时候无意义，所以先赋一个初值
        dp[0]=0;
        //base case：第一次操作的时候，屏幕中A要是最多的话，只能是输入了一个A。
        dp[1]=1;
        //做选择，我们的选择要保证屏幕中A最多，所以有两种情况
        //1.我们一直按A
        //2.我们先按A，然后在合适的地方按C-A,C-C,然后一直按C-V，如果是这种情况的话，我们要记录第一次按C-V的位置
        //下面的选择就会从第一种方案和第二种方案中选择屏幕中A最多的那个情况
        for (int i =2 ; i <=N ; i++) {
            dp[i]=dp[i-1]+1;//如果我们选择按A的话，就是前面的屏幕中A的个数然后加1即可
            for (int j = 2; j <i ; j++) {
                //选择第二种方案的话，我们用j来记录第一次按C-V的地方,我们屏幕中的最多A的数量就是
                // 从j到i一直按C-V，那么dp[j]的时候的屏幕上的A的个数乘以（i-j+1）就是屏幕中最大的A的数量
                dp[i]=Math.max(dp[i],dp[j-2]*(i-j+1));
            }
        }
        //最后返回的结果就是全部按完的时候的结果
        return dp[N];
    }
}
